/**
 * WEBSITES LOADER
 * ===============
 * This JavaScript file automatically loads website data from a JSON file
 * and creates interactive website cards on the Websites Made page.
 *
 * HOW IT WORKS:
 * 1. When the page loads, fetch /assets/data/websites.json
 * 2. For each website in the JSON, create a clickable card with image and text
 * 3. If loading fails, show a helpful error message
 *
 * The JSON file is generated by running: npm run build:websites
 */

// Wait for the HTML page to fully load before running our code
document.addEventListener('DOMContentLoaded', function () {
    // Find the container where we'll add the website cards
    const websitesGrid = document.getElementById('websites-grid');

    // If we can't find the grid container, stop here
    if (!websitesGrid) {
        console.error('Websites grid container not found');
        return;
    }

    /**
     * FUNCTION: Create a single website card element
     * Takes website data and returns a complete HTML element
     */
    function createWebsiteCard(site) {
        // Create the main card link (the entire card is clickable)
        const cardLink = document.createElement('a');
        cardLink.className = 'website-card'; // CSS class for styling
        cardLink.href = site.url; // Where the link goes when clicked
        cardLink.target = '_blank'; // Open in new tab
        cardLink.rel = 'noopener noreferrer'; // Security best practice
        cardLink.setAttribute('aria-label', `Open ${site.title}`); // Screen reader description

        // Create the image container
        const figure = document.createElement('figure');
        figure.className = 'website-thumb';

        // Create the actual image
        const img = document.createElement('img');
        img.src = site.thumbnail; // Image file path
        img.alt = `Thumbnail for ${site.title}`; // Screen reader description
        img.loading = 'lazy'; // Only load when needed
        img.decoding = 'async'; // Performance

        // Add the image to the figure container
        figure.appendChild(img);

        // Create the text information container
        const metaDiv = document.createElement('div');
        metaDiv.className = 'website-meta';

        // Website title
        const title = document.createElement('h3');
        title.className = 'website-title';
        title.textContent = site.title;

        // Website description
        const description = document.createElement('p');
        description.className = 'website-desc';
        description.textContent = site.shortDesc || 'View live website';

        // Optional: client/year subline
        if (site.client || site.year) {
            const sub = document.createElement('p');
            sub.className = 'website-sub';
            sub.textContent = `${site.client || ''}${site.client && site.year ? ' • ' : ''}${site.year || ''}`;
            metaDiv.appendChild(sub);
        }

        // Add title & desc to the meta container
        metaDiv.appendChild(title);
        metaDiv.appendChild(description);

        // Add both the image and text to the main card
        cardLink.appendChild(figure);
        cardLink.appendChild(metaDiv);

        return cardLink;
    }

    /**
     * FUNCTION: Display an error message when websites can't be loaded
     */
    function showErrorMessage() {
        const errorDiv = document.createElement('div');
        errorDiv.className = 'websites-error';
        errorDiv.style.textAlign = 'center';
        errorDiv.style.padding = '2rem';
        errorDiv.style.color = 'var(--muted)';

        errorDiv.innerHTML = `
          <h3 style="margin-bottom: 1rem; color: var(--primary);">No Websites Found</h3>
          <p style="margin-bottom: 1rem;">The websites data couldn't be loaded.</p>
          <p style="font-size: 0.9rem; opacity: 0.8;">
            To fix this, run the build script: <code style="background: var(--accent-2); padding: 0.2rem 0.5rem; border-radius: 4px;">npm run build:websites</code>
          </p>
        `;

        websitesGrid.appendChild(errorDiv);
    }

    /**
     * FUNCTION: Load and display all websites
     */
    async function loadWebsites() {
        try {
            websitesGrid.innerHTML = '<p style="text-align: center; color: var(--border); opacity: 0.7;">Loading websites...</p>';

            const response = await fetch('/assets/data/websites.json');
            if (!response.ok) {
                throw new Error(`Failed to load websites: ${response.status} ${response.statusText}`);
            }

            const websites = await response.json();
            websitesGrid.innerHTML = '';

            if (!websites || websites.length === 0) {
                showErrorMessage();
                return;
            }

            websites.forEach(site => {
                const card = createWebsiteCard(site);
                websitesGrid.appendChild(card);
            });

            console.log(`✅ Loaded ${websites.length} websites successfully`);
        } catch (error) {
            console.error('Error loading websites:', error);
            websitesGrid.innerHTML = '';
            showErrorMessage();
        }
    }

    // Start loading the websites when the script runs
    loadWebsites();
});
